{"version":3,"sources":["components/Spinner.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["spinner","className","post","props","style","color","transition","index","quote","author","href","target","rel","onClick","clicked","backgroundColor","App","state","error","componentWillMount","axios","get","then","res","console","log","setState","data","quotes","catch","err","message","newQuoteHandler","getRandomInt","max","Math","floor","random","length","colorGenerator","i","article","this","background","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oVAQeA,G,YAJC,kBACZ,yBAAKC,UAAU,UAAf,gBCgBWC,G,MAjBF,SAACC,GAEV,OACI,yBAAKF,UAAU,OAAOG,MAAO,CAACC,MAAOF,EAAME,MAAOC,WAAY,uBAC1D,uBAAGL,UAAU,SAASE,EAAMD,KAAKC,EAAMI,OAAOC,OAC9C,uBAAGP,UAAU,UAAb,KAAyBE,EAAMD,KAAKC,EAAMI,OAAOE,QACjD,6BACA,yBAAKR,UAAU,SACX,uBAAGG,MAAO,CAACC,MAAOF,EAAME,MAAOC,WAAY,sBAAuBI,KAAK,uCAAuCC,OAAO,SAASC,IAAI,uBAAsB,uBAAGX,UAAU,2BACrK,uBAAGG,MAAO,CAACC,MAAOF,EAAME,MAAOC,WAAY,sBAAuBI,KAAK,uCAAuCC,OAAO,SAASC,IAAI,uBAAsB,uBAAGX,UAAU,6BAEzK,4BAAQY,QAASV,EAAMW,QAASV,MAAO,CAACW,gBAAiBZ,EAAME,MAAOC,WAAY,kCAAlF,iBCyDGU,E,4MA/DbC,MAAQ,CACJf,KAAM,KACNK,MAAO,EACPQ,gBAAiB,UACjBG,MAAO,M,EAGXC,mBAAqB,WACjBC,IAAMC,IAAI,0IACLC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACxB,KAAMqB,EAAII,KAAKC,YAEjCC,OAAM,SAAAC,GAAG,OAAI,EAAKJ,SAAS,CAACR,MAAOY,EAAIC,c,EAGhDC,gBAAkB,WACd,IAAMC,EAAe,SAACC,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,KAEjDV,QAAQC,IAAIQ,EAAa,EAAKK,SAC9B,IAAMjC,EAAQ,EAAKkC,iBAEnB,EAAKb,SAAS,CAACnB,MAAO0B,EAAa,EAAKK,QAASvB,gBAAiBV,K,EAGtEkC,eAAiB,WAGb,IAFA,IACIlC,EAAQ,IACHmC,EAAI,EAAGA,EAAI,EAAGA,IACpBnC,GAHa,mBAGK8B,KAAKC,MAAsB,GAAhBD,KAAKE,WACrC,OAAOhC,G,uDAIT,IAAIoC,EAAU,kBAAC,EAAD,MAmBd,OAlBGC,KAAKzB,MAAMf,OACVwC,KAAKJ,OAASI,KAAKzB,MAAMf,KAAKoC,OAC9BG,EACE,kBAAC,EAAD,CACElC,MAASmC,KAAKzB,MAAMV,MACpBL,KAAQwC,KAAKzB,MAAMf,KACnBa,gBAAmB2B,KAAKzB,MAAMF,gBAC9BV,MAAUqC,KAAKzB,MAAMF,gBACrBD,QAAW4B,KAAKV,mBAKrBU,KAAKzB,MAAMC,QACZuB,EAAW,uBAAGrC,MAAO,CAACC,MAAM,UAAWqC,KAAKzB,MAAMC,MAAvC,mCAKX,yBAAKjB,UAAU,MAAMG,MAAO,CAACuC,WAAYD,KAAKzB,MAAMF,gBAAiBT,WAAY,kCAC/E,8CACCmC,O,GA1DSG,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAX,GACLM,QAAQN,MAAMA,EAAMa,c","file":"static/js/main.3a9df22e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Spinner.css';\r\n\r\nconst spinner = () => (\r\n    <div className='Loader'>Loading...</div>\r\n);\r\n\r\nexport default spinner;","import React from 'react';\r\n\r\nimport './Post.css';\r\n\r\nconst post = (props) => {\r\n\r\n    return (\r\n        <div className='Post' style={{color: props.color, transition: 'color ease-in 0.5s'}}>\r\n            <p className='quote'>{props.post[props.index].quote}</p>\r\n            <p className='author'>- {props.post[props.index].author}</p>\r\n            <div>\r\n            <div className='icons'>\r\n                <a style={{color: props.color, transition: 'color ease-in 0.5s'}} href='https://twitter.com/lesdoggg?lang=fr' target='_blank' rel=\"noopener noreferrer\"><i className=\"fab fa-twitter-square\"/></a>\r\n                <a style={{color: props.color, transition: 'color ease-in 0.5s'}} href='https://twitter.com/lesdoggg?lang=fr' target='_blank' rel=\"noopener noreferrer\"><i className=\"fab fa-facebook-square\"/></a>\r\n            </div>\r\n            <button onClick={props.clicked} style={{backgroundColor: props.color, transition: 'background-color ease-in 0.5s'}}>New Quote</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default post;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport './App.css';\n\nimport Spinner from './components/Spinner';\nimport Post from './components/Post';\n\nclass App extends Component {\n  state = {\n      post: null,\n      index: 0,\n      backgroundColor: '#daa520',\n      error: null\n  };\n\n  componentWillMount = () => {\n      axios.get('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n          .then(res=>{\n              console.log(res)\n              this.setState({post: res.data.quotes})\n          })\n          .catch(err => this.setState({error: err.message}));\n  };\n\n  newQuoteHandler = () => {\n      const getRandomInt = (max) => {\n          return Math.floor(Math.random() * Math.floor(max));\n        };\n      console.log(getRandomInt(this.length));\n      const color = this.colorGenerator();\n      //document.body.style = 'background: ' + color +';';\n      this.setState({index: getRandomInt(this.length), backgroundColor: color});\n  };\n\n  colorGenerator = () => { \n      const letters = \"0123456789ABCDEF\"; \n      let color = '#'; \n      for (let i = 0; i < 6; i++) \n         color += letters[(Math.floor(Math.random() * 16))]; \n      return color;\n  };\n\n  render () {\n    let article = <Spinner />\n    if(this.state.post) {\n        this.length = this.state.post.length;\n        article = (\n          <Post \n            index = {this.state.index}\n            post = {this.state.post}\n            backgroundColor = {this.state.backgroundColor}\n            color =  {this.state.backgroundColor}\n            clicked = {this.newQuoteHandler}\n          />\n        );\n    };\n\n    if(this.state.error) {\n      article = (<p style={{color:'black'}}>{this.state.error}: Quotes could not be loaded !</p>);\n    };\n\n\n    return (\n      <div className=\"App\" style={{background: this.state.backgroundColor, transition: 'background-color ease-in 0.5s'}}>\n        <h1>Quotes Machine</h1>\n        {article}\n      </div>  \n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}